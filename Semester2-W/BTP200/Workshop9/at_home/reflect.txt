1. A string can have a capacity of N, but have a length less than that. You have used such
strings in the past, e.g. char myString[100] = “hello world”; has a size of 100 but a length
of 11. Is your class coded to allocate exactly L + 1 bytes of storage for any string, where L =
string length and 1 is the storage for the 0 character? Can your class still work if you
decided to be generous and give all your strings more capacity than they need?

- Yes, allocate a string with less size than your current array is totally fine, however, the null terminator,
need to place right at the end of the string, to avoid garbage come in. The code that we did, was suppose to have 
a size of 100 in the string. However, in case the word might be longer than the size it can handle, we do the check
for either the string we will receive or the size have been passed compare to the current string size to see which
one has enough size to allocate the string, then we will use that

2. Given how hard you found it to debug your string library, is it a good idea to always
make your own libraries, or to use the standard one used by everybody that are tested and
true?
- I would say yes. Our own library help us controls what is happen between member variable and member function. However,
I personally don't think we should use our own string library in some circumstance, like the s2 and other. 

3. When you use your sict::String class in the main function, do you have to set them to the
safe empty state? Do you have to clean up after them at the end of the function? Can you
add 2 strings together without worrying about whether data is lost or not? How would
this have made some of your previous labs easier, if you could use sict::String instead of
regular char arrays?
- I do need to set the value to empty state, because I don't know what was contain inside the string.
I do need to clean up the function, so that the next function or operator has the space to put their input
or value in. I can added 2 string together like we did in the in_lab and at_home using concat. There are several way
to do it, without worry of losing any data. We can either create a new temp char, pass to char and concat to the second
one, or to concat directly from the first one. This make the previous lab easier because there is different variable 
contain different string, where we know which one contain which one, so we can just concat them together