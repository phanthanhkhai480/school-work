#!/bin/bash

# Assignment 1
# Course:                DPS918
# Family Name:           Huang
# Given Name:            Huiwen
# Student Number:        034-485-128
# Login name:            hhuang66
# Professor:             Les Czegel
# Due Date:              June 6, 2017
#
# I declare that the attached assignment is my own work in accordance with
# Seneca Academic Policy.  No part of this assignment has been copied manually
# or electronically from any other source (including web sites) or distributed
# to other students.

#Test filename and containing directories
#  the first argument is $1
#  2> /dev/null means to redirect all errors produced by this command to /dev/null, 
#  that is discard them, and don't display them to the screen 
#  Redirect standard output (file handle 1) to /dev/null
ls -ald $1 2> /dev/null 1> /dev/null

#filename exit status 
#  $? is the exit status of the last comman
FileExit=$?
#echo "FileExit = $FileExit"

# $# to check how many parameters, 3 situation
case $# in
   0) dir=. ;;
   1) dir=$1 ;;
   #showpath will accept one argument
   *) echo "Only Accept one argument" >&2
      exit 1 ;;
esac

#If the specified filename is not a valid, existing file or directory, 
#there will be an error message and the script terminated (exit status 1).
valid=0
if [ $# -gt 1 ] 
then
   echo "Usage: showpath [ filename ] "
   exit 1
elif [ $FileExit != 0 ] 
then
    echo "$1 is not a valid filename"
    exit 1
fi

if [ $valid == 0 ] 
then
# display if arugment is a relative path
ls -ald $(pwd)/$dir 2> /dev/null 1> /dev/null
# $? is the exit status of the last command, 0 means successful 
if [ $? == 0 ] 
then
    # arugment was not an absolute path name
    Path=$(pwd)/$dir 
else
   # arugment was an absolute path name
    Path=$dir 
fi

PathNameFile1=$(mktemp)
PathNameFile2=$(mktemp)

echo $Path | sed 's/\//\n/g' > ${PathNameFile2}

# path name file should use / to add root layer
echo "/" >> ${PathNameFile1}
cat ${PathNameFile2} | sed 1d >> ${PathNameFile1}

#Permission File use temporary to create
permissionFile=$(mktemp)

while read line
do
if [ $line == '/' ]	; then
    Position='/'
else
    Position=$Position/$line
fi
ls -ald $Position | cut -c1-10 >> ${permissionFile}
done < ${PathNameFile1}

#store detail information using temporary file 
infomation=$(mktemp)

while read line
do
if [ $line == '/' ] 
then
    Position='/'
else
    Position=$Position/$line
fi
newLine="Links: $(ls -ald $Position | awk '{print $2}') "
newLine="$newLine  Owner: $(ls -ald $Position | awk '{print $3}') "
newLine="$newLine  Group: $(ls -ald $Position | awk '{print $3}') "
newLine="$newLine  Size: $(ls -ald $Position | awk '{print $5}') "
newLine="$newLine  Modified: $(ls -ald $Position | awk '{print $6,$7,$8}') "
echo $newLine >> ${infomation}
done < ${PathNameFile1}

declare -i Position 
#default position 
Position=$max
declare -i max
# calculate how many layer
max=$(wc -l ${PathNameFile1} | awk '{print $1}')

#use the Temporary File and remove them before exit program
TemporaryFile=$(mktemp)
Permission=$(mktemp)
PermissionFirstChar=$(mktemp)
PermissionChange=$(mktemp)
while read line
do
echo -n $line | cut -c2-10 | sed 's/.../& /g' | sed 's/./& /g' >> ${Permission}
done < ${permissionFile}

while read line
do
echo $line | cut -c1  >> ${PermissionFirstChar}
done < ${permissionFile}

#Join all lines using the comma delimiter: 
paste -d' ' ${PermissionFirstChar} ${Permission} ${PathNameFile1} > ${PermissionChange}

while read line
do
echo $line | sed 's/\n/&\n/g' >> ${TemporaryFile}
echo "" >> ${TemporaryFile}
done < ${PermissionChange}


#Output Display Format
#the screen is cleared before the output is displayed
clear
# There are 3 spaces between the permission owner, groups, other, and filename
echo "  Owner   Group   Other   Filename"
echo "  -----   -----   -----   --------"
echo "                                  "
cat ${TemporaryFile} | awk 'BEGIN{f="([^ ]+ )"} {print $1" " $2" " $3" " $4"   " $5" " $6" " $7"   " $8" " $9" " $10"   "  $11" ";}'

#set cursor position
CursorPosition=$((((max * 2))+1))
#First character of Filename
#On initial display, the cursor will be on the first character of the specified (or default) filename. 
#Information for this file will also be displayed.
col=26
row=$CursorPosition
#tput command is used to query the terminfo terminal database and check if that terminal supports a specific feature.
EndRow=$(tput lines)
#With -icanon, set 1 characters minimum and there is no timeout for a completed read.
stty -icanon min 1 time 0 -echo

#Send the sequence to move the cursor to row (row+1), column 0
tput cup $((row+1)) 0
# Display the Details Information
cat ${infomation} | awk 'NR == '$Position''

# valid keys is shown on the second line from the bottom of the terminal window
tput cup $((lastRow - 2)) 0
# a line is shown the valid keys accepted during execution of the showpath command, 
printf "Valid commands: u(p) d(own) q(uit) \n"
#set line to read in the Detail File
line=$Position 

#execute 3 key function
while true
do
  # use row and col to set the cursor position
  tput cup $row $col
  #dd command copies a file
  #bs= sets the blocksize, for example bs=3 would be 3 blocksize.
  #count= copies only this number of blocks
  Key=$(dd bs=3 count=1 2> /dev/null)
  case $Key in
    u) # move the cursor to the first character of the directory name above the current line.
	   # do from the fourth row
	   if [ "$row" -gt 3 ]
       then
         tput cup $((row+1)) 0
         tput el #clear to end of line
         row=$((row - 2))
         LineInformation=$((row + 1))
         tput cup $LineInformation 0
         line=$((line-1))
         cat ${infomation} | awk 'NR == '$line''
       fi;;
    d) #move the cursor to the first character of the file or directory name below the current line.
	   if [ "$row" -lt $CursorPosition ]
       then
         tput cup $((row+1)) 0
         tput el #clear to end of line
         row=$((row + 2))
         LineInformation=$((row + 1))
         tput cup $LineInformation 0
         line=$((line+1))
         cat ${infomation} | awk 'NR == '$line''
       fi;;
    q) # terminate the showpath script, remove all temporary file. throw away error message  
	   rm /tmp/showpath.temp.$$ 2> /dev/null
       stty icanon echo
	   # the command prompt appear on the bottom line of the terminal window.
       tput cup $lastRow 0
       exit 0;;
  esac
done

fi
